// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQUEST_FIREBASE_REMOTE_CONFIG_FBS_H_
#define FLATBUFFERS_GENERATED_REQUEST_FIREBASE_REMOTE_CONFIG_FBS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace firebase {
namespace remote_config {
namespace fbs {

struct Request;
struct RequestBuilder;

struct Request FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_APPINSTANCEID = 4,
    VT_APPINSTANCEIDTOKEN = 6,
    VT_APPID = 8,
    VT_COUNTRYCODE = 10,
    VT_LANGUAGECODE = 12,
    VT_PLATFORMVERSION = 14,
    VT_TIMEZONE = 16,
    VT_APPVERSION = 18,
    VT_PACKAGENAME = 20,
    VT_SDKVERSION = 22,
    VT_ANALYTICSUSERPROPERTIES = 24
  };
  const ::flatbuffers::String *appInstanceId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_APPINSTANCEID);
  }
  const ::flatbuffers::String *appInstanceIdToken() const {
    return GetPointer<const ::flatbuffers::String *>(VT_APPINSTANCEIDTOKEN);
  }
  const ::flatbuffers::String *appId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_APPID);
  }
  const ::flatbuffers::String *countryCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COUNTRYCODE);
  }
  const ::flatbuffers::String *languageCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LANGUAGECODE);
  }
  const ::flatbuffers::String *platformVersion() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLATFORMVERSION);
  }
  const ::flatbuffers::String *timeZone() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TIMEZONE);
  }
  const ::flatbuffers::String *appVersion() const {
    return GetPointer<const ::flatbuffers::String *>(VT_APPVERSION);
  }
  const ::flatbuffers::String *packageName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PACKAGENAME);
  }
  const ::flatbuffers::String *sdkVersion() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SDKVERSION);
  }
  const ::flatbuffers::String *analyticsUserProperties() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ANALYTICSUSERPROPERTIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_APPINSTANCEID) &&
           verifier.VerifyString(appInstanceId()) &&
           VerifyOffset(verifier, VT_APPINSTANCEIDTOKEN) &&
           verifier.VerifyString(appInstanceIdToken()) &&
           VerifyOffset(verifier, VT_APPID) &&
           verifier.VerifyString(appId()) &&
           VerifyOffset(verifier, VT_COUNTRYCODE) &&
           verifier.VerifyString(countryCode()) &&
           VerifyOffset(verifier, VT_LANGUAGECODE) &&
           verifier.VerifyString(languageCode()) &&
           VerifyOffset(verifier, VT_PLATFORMVERSION) &&
           verifier.VerifyString(platformVersion()) &&
           VerifyOffset(verifier, VT_TIMEZONE) &&
           verifier.VerifyString(timeZone()) &&
           VerifyOffset(verifier, VT_APPVERSION) &&
           verifier.VerifyString(appVersion()) &&
           VerifyOffset(verifier, VT_PACKAGENAME) &&
           verifier.VerifyString(packageName()) &&
           VerifyOffset(verifier, VT_SDKVERSION) &&
           verifier.VerifyString(sdkVersion()) &&
           VerifyOffset(verifier, VT_ANALYTICSUSERPROPERTIES) &&
           verifier.VerifyString(analyticsUserProperties()) &&
           verifier.EndTable();
  }
};

struct RequestBuilder {
  typedef Request Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_appInstanceId(::flatbuffers::Offset<::flatbuffers::String> appInstanceId) {
    fbb_.AddOffset(Request::VT_APPINSTANCEID, appInstanceId);
  }
  void add_appInstanceIdToken(::flatbuffers::Offset<::flatbuffers::String> appInstanceIdToken) {
    fbb_.AddOffset(Request::VT_APPINSTANCEIDTOKEN, appInstanceIdToken);
  }
  void add_appId(::flatbuffers::Offset<::flatbuffers::String> appId) {
    fbb_.AddOffset(Request::VT_APPID, appId);
  }
  void add_countryCode(::flatbuffers::Offset<::flatbuffers::String> countryCode) {
    fbb_.AddOffset(Request::VT_COUNTRYCODE, countryCode);
  }
  void add_languageCode(::flatbuffers::Offset<::flatbuffers::String> languageCode) {
    fbb_.AddOffset(Request::VT_LANGUAGECODE, languageCode);
  }
  void add_platformVersion(::flatbuffers::Offset<::flatbuffers::String> platformVersion) {
    fbb_.AddOffset(Request::VT_PLATFORMVERSION, platformVersion);
  }
  void add_timeZone(::flatbuffers::Offset<::flatbuffers::String> timeZone) {
    fbb_.AddOffset(Request::VT_TIMEZONE, timeZone);
  }
  void add_appVersion(::flatbuffers::Offset<::flatbuffers::String> appVersion) {
    fbb_.AddOffset(Request::VT_APPVERSION, appVersion);
  }
  void add_packageName(::flatbuffers::Offset<::flatbuffers::String> packageName) {
    fbb_.AddOffset(Request::VT_PACKAGENAME, packageName);
  }
  void add_sdkVersion(::flatbuffers::Offset<::flatbuffers::String> sdkVersion) {
    fbb_.AddOffset(Request::VT_SDKVERSION, sdkVersion);
  }
  void add_analyticsUserProperties(::flatbuffers::Offset<::flatbuffers::String> analyticsUserProperties) {
    fbb_.AddOffset(Request::VT_ANALYTICSUSERPROPERTIES, analyticsUserProperties);
  }
  explicit RequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Request>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Request> CreateRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> appInstanceId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> appInstanceIdToken = 0,
    ::flatbuffers::Offset<::flatbuffers::String> appId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> countryCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> languageCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> platformVersion = 0,
    ::flatbuffers::Offset<::flatbuffers::String> timeZone = 0,
    ::flatbuffers::Offset<::flatbuffers::String> appVersion = 0,
    ::flatbuffers::Offset<::flatbuffers::String> packageName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sdkVersion = 0,
    ::flatbuffers::Offset<::flatbuffers::String> analyticsUserProperties = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_analyticsUserProperties(analyticsUserProperties);
  builder_.add_sdkVersion(sdkVersion);
  builder_.add_packageName(packageName);
  builder_.add_appVersion(appVersion);
  builder_.add_timeZone(timeZone);
  builder_.add_platformVersion(platformVersion);
  builder_.add_languageCode(languageCode);
  builder_.add_countryCode(countryCode);
  builder_.add_appId(appId);
  builder_.add_appInstanceIdToken(appInstanceIdToken);
  builder_.add_appInstanceId(appInstanceId);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Request> CreateRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *appInstanceId = nullptr,
    const char *appInstanceIdToken = nullptr,
    const char *appId = nullptr,
    const char *countryCode = nullptr,
    const char *languageCode = nullptr,
    const char *platformVersion = nullptr,
    const char *timeZone = nullptr,
    const char *appVersion = nullptr,
    const char *packageName = nullptr,
    const char *sdkVersion = nullptr,
    const char *analyticsUserProperties = nullptr) {
  auto appInstanceId__ = appInstanceId ? _fbb.CreateString(appInstanceId) : 0;
  auto appInstanceIdToken__ = appInstanceIdToken ? _fbb.CreateString(appInstanceIdToken) : 0;
  auto appId__ = appId ? _fbb.CreateString(appId) : 0;
  auto countryCode__ = countryCode ? _fbb.CreateString(countryCode) : 0;
  auto languageCode__ = languageCode ? _fbb.CreateString(languageCode) : 0;
  auto platformVersion__ = platformVersion ? _fbb.CreateString(platformVersion) : 0;
  auto timeZone__ = timeZone ? _fbb.CreateString(timeZone) : 0;
  auto appVersion__ = appVersion ? _fbb.CreateString(appVersion) : 0;
  auto packageName__ = packageName ? _fbb.CreateString(packageName) : 0;
  auto sdkVersion__ = sdkVersion ? _fbb.CreateString(sdkVersion) : 0;
  auto analyticsUserProperties__ = analyticsUserProperties ? _fbb.CreateString(analyticsUserProperties) : 0;
  return firebase::remote_config::fbs::CreateRequest(
      _fbb,
      appInstanceId__,
      appInstanceIdToken__,
      appId__,
      countryCode__,
      languageCode__,
      platformVersion__,
      timeZone__,
      appVersion__,
      packageName__,
      sdkVersion__,
      analyticsUserProperties__);
}

inline const firebase::remote_config::fbs::Request *GetRequest(const void *buf) {
  return ::flatbuffers::GetRoot<firebase::remote_config::fbs::Request>(buf);
}

inline const firebase::remote_config::fbs::Request *GetSizePrefixedRequest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<firebase::remote_config::fbs::Request>(buf);
}

inline bool VerifyRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<firebase::remote_config::fbs::Request>(nullptr);
}

inline bool VerifySizePrefixedRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<firebase::remote_config::fbs::Request>(nullptr);
}

inline void FinishRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<firebase::remote_config::fbs::Request> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<firebase::remote_config::fbs::Request> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs
}  // namespace remote_config
}  // namespace firebase

#endif  // FLATBUFFERS_GENERATED_REQUEST_FIREBASE_REMOTE_CONFIG_FBS_H_
