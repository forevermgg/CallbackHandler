// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGING_COM_GOOGLE_FIREBASE_MESSAGING_CPP_H_
#define FLATBUFFERS_GENERATED_MESSAGING_COM_GOOGLE_FIREBASE_MESSAGING_CPP_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace com {
namespace google {
namespace firebase {
namespace messaging {
namespace cpp {

struct DataPair;
struct DataPairBuilder;

struct SerializedNotification;
struct SerializedNotificationBuilder;

struct SerializedMessage;
struct SerializedMessageBuilder;

struct SerializedTokenReceived;
struct SerializedTokenReceivedBuilder;

struct SerializedEvent;
struct SerializedEventBuilder;

enum SerializedEventUnion : uint8_t {
  SerializedEventUnion_NONE = 0,
  SerializedEventUnion_SerializedMessage = 1,
  SerializedEventUnion_SerializedTokenReceived = 2,
  SerializedEventUnion_MIN = SerializedEventUnion_NONE,
  SerializedEventUnion_MAX = SerializedEventUnion_SerializedTokenReceived
};

inline const SerializedEventUnion (&EnumValuesSerializedEventUnion())[3] {
  static const SerializedEventUnion values[] = {
    SerializedEventUnion_NONE,
    SerializedEventUnion_SerializedMessage,
    SerializedEventUnion_SerializedTokenReceived
  };
  return values;
}

inline const char * const *EnumNamesSerializedEventUnion() {
  static const char * const names[4] = {
    "NONE",
    "SerializedMessage",
    "SerializedTokenReceived",
    nullptr
  };
  return names;
}

inline const char *EnumNameSerializedEventUnion(SerializedEventUnion e) {
  if (::flatbuffers::IsOutRange(e, SerializedEventUnion_NONE, SerializedEventUnion_SerializedTokenReceived)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSerializedEventUnion()[index];
}

template<typename T> struct SerializedEventUnionTraits {
  static const SerializedEventUnion enum_value = SerializedEventUnion_NONE;
};

template<> struct SerializedEventUnionTraits<com::google::firebase::messaging::cpp::SerializedMessage> {
  static const SerializedEventUnion enum_value = SerializedEventUnion_SerializedMessage;
};

template<> struct SerializedEventUnionTraits<com::google::firebase::messaging::cpp::SerializedTokenReceived> {
  static const SerializedEventUnion enum_value = SerializedEventUnion_SerializedTokenReceived;
};

bool VerifySerializedEventUnion(::flatbuffers::Verifier &verifier, const void *obj, SerializedEventUnion type);
bool VerifySerializedEventUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct DataPair FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DataPairBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_VALUE = 6
  };
  const ::flatbuffers::String *key() const {
    return GetPointer<const ::flatbuffers::String *>(VT_KEY);
  }
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct DataPairBuilder {
  typedef DataPair Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key(::flatbuffers::Offset<::flatbuffers::String> key) {
    fbb_.AddOffset(DataPair::VT_KEY, key);
  }
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(DataPair::VT_VALUE, value);
  }
  explicit DataPairBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DataPair> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DataPair>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DataPair> CreateDataPair(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> key = 0,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0) {
  DataPairBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_key(key);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DataPair> CreateDataPairDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    const char *value = nullptr) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return com::google::firebase::messaging::cpp::CreateDataPair(
      _fbb,
      key__,
      value__);
}

struct SerializedNotification FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SerializedNotificationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TITLE = 4,
    VT_BODY = 6,
    VT_ICON = 8,
    VT_SOUND = 10,
    VT_BADGE = 12,
    VT_TAG = 14,
    VT_COLOR = 16,
    VT_CLICK_ACTION = 18,
    VT_BODY_LOC_KEY = 20,
    VT_BODY_LOC_ARGS = 22,
    VT_TITLE_LOC_KEY = 24,
    VT_TITLE_LOC_ARGS = 26,
    VT_ANDROID_CHANNEL_ID = 28
  };
  const ::flatbuffers::String *title() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TITLE);
  }
  const ::flatbuffers::String *body() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BODY);
  }
  const ::flatbuffers::String *icon() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ICON);
  }
  const ::flatbuffers::String *sound() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOUND);
  }
  const ::flatbuffers::String *badge() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BADGE);
  }
  const ::flatbuffers::String *tag() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TAG);
  }
  const ::flatbuffers::String *color() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COLOR);
  }
  const ::flatbuffers::String *click_action() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLICK_ACTION);
  }
  const ::flatbuffers::String *body_loc_key() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BODY_LOC_KEY);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *body_loc_args() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_BODY_LOC_ARGS);
  }
  const ::flatbuffers::String *title_loc_key() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TITLE_LOC_KEY);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *title_loc_args() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TITLE_LOC_ARGS);
  }
  const ::flatbuffers::String *android_channel_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ANDROID_CHANNEL_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyOffset(verifier, VT_BODY) &&
           verifier.VerifyString(body()) &&
           VerifyOffset(verifier, VT_ICON) &&
           verifier.VerifyString(icon()) &&
           VerifyOffset(verifier, VT_SOUND) &&
           verifier.VerifyString(sound()) &&
           VerifyOffset(verifier, VT_BADGE) &&
           verifier.VerifyString(badge()) &&
           VerifyOffset(verifier, VT_TAG) &&
           verifier.VerifyString(tag()) &&
           VerifyOffset(verifier, VT_COLOR) &&
           verifier.VerifyString(color()) &&
           VerifyOffset(verifier, VT_CLICK_ACTION) &&
           verifier.VerifyString(click_action()) &&
           VerifyOffset(verifier, VT_BODY_LOC_KEY) &&
           verifier.VerifyString(body_loc_key()) &&
           VerifyOffset(verifier, VT_BODY_LOC_ARGS) &&
           verifier.VerifyVector(body_loc_args()) &&
           verifier.VerifyVectorOfStrings(body_loc_args()) &&
           VerifyOffset(verifier, VT_TITLE_LOC_KEY) &&
           verifier.VerifyString(title_loc_key()) &&
           VerifyOffset(verifier, VT_TITLE_LOC_ARGS) &&
           verifier.VerifyVector(title_loc_args()) &&
           verifier.VerifyVectorOfStrings(title_loc_args()) &&
           VerifyOffset(verifier, VT_ANDROID_CHANNEL_ID) &&
           verifier.VerifyString(android_channel_id()) &&
           verifier.EndTable();
  }
};

struct SerializedNotificationBuilder {
  typedef SerializedNotification Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_title(::flatbuffers::Offset<::flatbuffers::String> title) {
    fbb_.AddOffset(SerializedNotification::VT_TITLE, title);
  }
  void add_body(::flatbuffers::Offset<::flatbuffers::String> body) {
    fbb_.AddOffset(SerializedNotification::VT_BODY, body);
  }
  void add_icon(::flatbuffers::Offset<::flatbuffers::String> icon) {
    fbb_.AddOffset(SerializedNotification::VT_ICON, icon);
  }
  void add_sound(::flatbuffers::Offset<::flatbuffers::String> sound) {
    fbb_.AddOffset(SerializedNotification::VT_SOUND, sound);
  }
  void add_badge(::flatbuffers::Offset<::flatbuffers::String> badge) {
    fbb_.AddOffset(SerializedNotification::VT_BADGE, badge);
  }
  void add_tag(::flatbuffers::Offset<::flatbuffers::String> tag) {
    fbb_.AddOffset(SerializedNotification::VT_TAG, tag);
  }
  void add_color(::flatbuffers::Offset<::flatbuffers::String> color) {
    fbb_.AddOffset(SerializedNotification::VT_COLOR, color);
  }
  void add_click_action(::flatbuffers::Offset<::flatbuffers::String> click_action) {
    fbb_.AddOffset(SerializedNotification::VT_CLICK_ACTION, click_action);
  }
  void add_body_loc_key(::flatbuffers::Offset<::flatbuffers::String> body_loc_key) {
    fbb_.AddOffset(SerializedNotification::VT_BODY_LOC_KEY, body_loc_key);
  }
  void add_body_loc_args(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> body_loc_args) {
    fbb_.AddOffset(SerializedNotification::VT_BODY_LOC_ARGS, body_loc_args);
  }
  void add_title_loc_key(::flatbuffers::Offset<::flatbuffers::String> title_loc_key) {
    fbb_.AddOffset(SerializedNotification::VT_TITLE_LOC_KEY, title_loc_key);
  }
  void add_title_loc_args(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> title_loc_args) {
    fbb_.AddOffset(SerializedNotification::VT_TITLE_LOC_ARGS, title_loc_args);
  }
  void add_android_channel_id(::flatbuffers::Offset<::flatbuffers::String> android_channel_id) {
    fbb_.AddOffset(SerializedNotification::VT_ANDROID_CHANNEL_ID, android_channel_id);
  }
  explicit SerializedNotificationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SerializedNotification> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SerializedNotification>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SerializedNotification> CreateSerializedNotification(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> title = 0,
    ::flatbuffers::Offset<::flatbuffers::String> body = 0,
    ::flatbuffers::Offset<::flatbuffers::String> icon = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sound = 0,
    ::flatbuffers::Offset<::flatbuffers::String> badge = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tag = 0,
    ::flatbuffers::Offset<::flatbuffers::String> color = 0,
    ::flatbuffers::Offset<::flatbuffers::String> click_action = 0,
    ::flatbuffers::Offset<::flatbuffers::String> body_loc_key = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> body_loc_args = 0,
    ::flatbuffers::Offset<::flatbuffers::String> title_loc_key = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> title_loc_args = 0,
    ::flatbuffers::Offset<::flatbuffers::String> android_channel_id = 0) {
  SerializedNotificationBuilder builder_(_fbb);
  builder_.add_android_channel_id(android_channel_id);
  builder_.add_title_loc_args(title_loc_args);
  builder_.add_title_loc_key(title_loc_key);
  builder_.add_body_loc_args(body_loc_args);
  builder_.add_body_loc_key(body_loc_key);
  builder_.add_click_action(click_action);
  builder_.add_color(color);
  builder_.add_tag(tag);
  builder_.add_badge(badge);
  builder_.add_sound(sound);
  builder_.add_icon(icon);
  builder_.add_body(body);
  builder_.add_title(title);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SerializedNotification> CreateSerializedNotificationDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *title = nullptr,
    const char *body = nullptr,
    const char *icon = nullptr,
    const char *sound = nullptr,
    const char *badge = nullptr,
    const char *tag = nullptr,
    const char *color = nullptr,
    const char *click_action = nullptr,
    const char *body_loc_key = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *body_loc_args = nullptr,
    const char *title_loc_key = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *title_loc_args = nullptr,
    const char *android_channel_id = nullptr) {
  auto title__ = title ? _fbb.CreateString(title) : 0;
  auto body__ = body ? _fbb.CreateString(body) : 0;
  auto icon__ = icon ? _fbb.CreateString(icon) : 0;
  auto sound__ = sound ? _fbb.CreateString(sound) : 0;
  auto badge__ = badge ? _fbb.CreateString(badge) : 0;
  auto tag__ = tag ? _fbb.CreateString(tag) : 0;
  auto color__ = color ? _fbb.CreateString(color) : 0;
  auto click_action__ = click_action ? _fbb.CreateString(click_action) : 0;
  auto body_loc_key__ = body_loc_key ? _fbb.CreateString(body_loc_key) : 0;
  auto body_loc_args__ = body_loc_args ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*body_loc_args) : 0;
  auto title_loc_key__ = title_loc_key ? _fbb.CreateString(title_loc_key) : 0;
  auto title_loc_args__ = title_loc_args ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*title_loc_args) : 0;
  auto android_channel_id__ = android_channel_id ? _fbb.CreateString(android_channel_id) : 0;
  return com::google::firebase::messaging::cpp::CreateSerializedNotification(
      _fbb,
      title__,
      body__,
      icon__,
      sound__,
      badge__,
      tag__,
      color__,
      click_action__,
      body_loc_key__,
      body_loc_args__,
      title_loc_key__,
      title_loc_args__,
      android_channel_id__);
}

struct SerializedMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SerializedMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FROM = 4,
    VT_TO = 6,
    VT_COLLAPSE_KEY = 8,
    VT_DATA = 10,
    VT_RAW_DATA = 12,
    VT_MESSAGE_ID = 14,
    VT_MESSAGE_TYPE = 16,
    VT_PRIORITY = 18,
    VT_TIME_TO_LIVE = 20,
    VT_ERROR = 22,
    VT_ERROR_DESCRIPTION = 24,
    VT_NOTIFICATION = 26,
    VT_NOTIFICATION_OPENED = 28,
    VT_LINK = 30,
    VT_SENT_TIME = 32,
    VT_ORIGINAL_PRIORITY = 34
  };
  const ::flatbuffers::String *from() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FROM);
  }
  const ::flatbuffers::String *to() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TO);
  }
  const ::flatbuffers::String *collapse_key() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COLLAPSE_KEY);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<com::google::firebase::messaging::cpp::DataPair>> *data() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<com::google::firebase::messaging::cpp::DataPair>> *>(VT_DATA);
  }
  const ::flatbuffers::Vector<uint8_t> *raw_data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_RAW_DATA);
  }
  const ::flatbuffers::String *message_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE_ID);
  }
  const ::flatbuffers::String *message_type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE_TYPE);
  }
  const ::flatbuffers::String *priority() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRIORITY);
  }
  int32_t time_to_live() const {
    return GetField<int32_t>(VT_TIME_TO_LIVE, 0);
  }
  const ::flatbuffers::String *error() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ERROR);
  }
  const ::flatbuffers::String *error_description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ERROR_DESCRIPTION);
  }
  const com::google::firebase::messaging::cpp::SerializedNotification *notification() const {
    return GetPointer<const com::google::firebase::messaging::cpp::SerializedNotification *>(VT_NOTIFICATION);
  }
  bool notification_opened() const {
    return GetField<uint8_t>(VT_NOTIFICATION_OPENED, 0) != 0;
  }
  const ::flatbuffers::String *link() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LINK);
  }
  int64_t sent_time() const {
    return GetField<int64_t>(VT_SENT_TIME, 0);
  }
  const ::flatbuffers::String *original_priority() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGINAL_PRIORITY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FROM) &&
           verifier.VerifyString(from()) &&
           VerifyOffset(verifier, VT_TO) &&
           verifier.VerifyString(to()) &&
           VerifyOffset(verifier, VT_COLLAPSE_KEY) &&
           verifier.VerifyString(collapse_key()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.VerifyVectorOfTables(data()) &&
           VerifyOffset(verifier, VT_RAW_DATA) &&
           verifier.VerifyVector(raw_data()) &&
           VerifyOffset(verifier, VT_MESSAGE_ID) &&
           verifier.VerifyString(message_id()) &&
           VerifyOffset(verifier, VT_MESSAGE_TYPE) &&
           verifier.VerifyString(message_type()) &&
           VerifyOffset(verifier, VT_PRIORITY) &&
           verifier.VerifyString(priority()) &&
           VerifyField<int32_t>(verifier, VT_TIME_TO_LIVE, 4) &&
           VerifyOffset(verifier, VT_ERROR) &&
           verifier.VerifyString(error()) &&
           VerifyOffset(verifier, VT_ERROR_DESCRIPTION) &&
           verifier.VerifyString(error_description()) &&
           VerifyOffset(verifier, VT_NOTIFICATION) &&
           verifier.VerifyTable(notification()) &&
           VerifyField<uint8_t>(verifier, VT_NOTIFICATION_OPENED, 1) &&
           VerifyOffset(verifier, VT_LINK) &&
           verifier.VerifyString(link()) &&
           VerifyField<int64_t>(verifier, VT_SENT_TIME, 8) &&
           VerifyOffset(verifier, VT_ORIGINAL_PRIORITY) &&
           verifier.VerifyString(original_priority()) &&
           verifier.EndTable();
  }
};

struct SerializedMessageBuilder {
  typedef SerializedMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_from(::flatbuffers::Offset<::flatbuffers::String> from) {
    fbb_.AddOffset(SerializedMessage::VT_FROM, from);
  }
  void add_to(::flatbuffers::Offset<::flatbuffers::String> to) {
    fbb_.AddOffset(SerializedMessage::VT_TO, to);
  }
  void add_collapse_key(::flatbuffers::Offset<::flatbuffers::String> collapse_key) {
    fbb_.AddOffset(SerializedMessage::VT_COLLAPSE_KEY, collapse_key);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<com::google::firebase::messaging::cpp::DataPair>>> data) {
    fbb_.AddOffset(SerializedMessage::VT_DATA, data);
  }
  void add_raw_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> raw_data) {
    fbb_.AddOffset(SerializedMessage::VT_RAW_DATA, raw_data);
  }
  void add_message_id(::flatbuffers::Offset<::flatbuffers::String> message_id) {
    fbb_.AddOffset(SerializedMessage::VT_MESSAGE_ID, message_id);
  }
  void add_message_type(::flatbuffers::Offset<::flatbuffers::String> message_type) {
    fbb_.AddOffset(SerializedMessage::VT_MESSAGE_TYPE, message_type);
  }
  void add_priority(::flatbuffers::Offset<::flatbuffers::String> priority) {
    fbb_.AddOffset(SerializedMessage::VT_PRIORITY, priority);
  }
  void add_time_to_live(int32_t time_to_live) {
    fbb_.AddElement<int32_t>(SerializedMessage::VT_TIME_TO_LIVE, time_to_live, 0);
  }
  void add_error(::flatbuffers::Offset<::flatbuffers::String> error) {
    fbb_.AddOffset(SerializedMessage::VT_ERROR, error);
  }
  void add_error_description(::flatbuffers::Offset<::flatbuffers::String> error_description) {
    fbb_.AddOffset(SerializedMessage::VT_ERROR_DESCRIPTION, error_description);
  }
  void add_notification(::flatbuffers::Offset<com::google::firebase::messaging::cpp::SerializedNotification> notification) {
    fbb_.AddOffset(SerializedMessage::VT_NOTIFICATION, notification);
  }
  void add_notification_opened(bool notification_opened) {
    fbb_.AddElement<uint8_t>(SerializedMessage::VT_NOTIFICATION_OPENED, static_cast<uint8_t>(notification_opened), 0);
  }
  void add_link(::flatbuffers::Offset<::flatbuffers::String> link) {
    fbb_.AddOffset(SerializedMessage::VT_LINK, link);
  }
  void add_sent_time(int64_t sent_time) {
    fbb_.AddElement<int64_t>(SerializedMessage::VT_SENT_TIME, sent_time, 0);
  }
  void add_original_priority(::flatbuffers::Offset<::flatbuffers::String> original_priority) {
    fbb_.AddOffset(SerializedMessage::VT_ORIGINAL_PRIORITY, original_priority);
  }
  explicit SerializedMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SerializedMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SerializedMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SerializedMessage> CreateSerializedMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> from = 0,
    ::flatbuffers::Offset<::flatbuffers::String> to = 0,
    ::flatbuffers::Offset<::flatbuffers::String> collapse_key = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<com::google::firebase::messaging::cpp::DataPair>>> data = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> raw_data = 0,
    ::flatbuffers::Offset<::flatbuffers::String> message_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> message_type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> priority = 0,
    int32_t time_to_live = 0,
    ::flatbuffers::Offset<::flatbuffers::String> error = 0,
    ::flatbuffers::Offset<::flatbuffers::String> error_description = 0,
    ::flatbuffers::Offset<com::google::firebase::messaging::cpp::SerializedNotification> notification = 0,
    bool notification_opened = false,
    ::flatbuffers::Offset<::flatbuffers::String> link = 0,
    int64_t sent_time = 0,
    ::flatbuffers::Offset<::flatbuffers::String> original_priority = 0) {
  SerializedMessageBuilder builder_(_fbb);
  builder_.add_sent_time(sent_time);
  builder_.add_original_priority(original_priority);
  builder_.add_link(link);
  builder_.add_notification(notification);
  builder_.add_error_description(error_description);
  builder_.add_error(error);
  builder_.add_time_to_live(time_to_live);
  builder_.add_priority(priority);
  builder_.add_message_type(message_type);
  builder_.add_message_id(message_id);
  builder_.add_raw_data(raw_data);
  builder_.add_data(data);
  builder_.add_collapse_key(collapse_key);
  builder_.add_to(to);
  builder_.add_from(from);
  builder_.add_notification_opened(notification_opened);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SerializedMessage> CreateSerializedMessageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *from = nullptr,
    const char *to = nullptr,
    const char *collapse_key = nullptr,
    const std::vector<::flatbuffers::Offset<com::google::firebase::messaging::cpp::DataPair>> *data = nullptr,
    const std::vector<uint8_t> *raw_data = nullptr,
    const char *message_id = nullptr,
    const char *message_type = nullptr,
    const char *priority = nullptr,
    int32_t time_to_live = 0,
    const char *error = nullptr,
    const char *error_description = nullptr,
    ::flatbuffers::Offset<com::google::firebase::messaging::cpp::SerializedNotification> notification = 0,
    bool notification_opened = false,
    const char *link = nullptr,
    int64_t sent_time = 0,
    const char *original_priority = nullptr) {
  auto from__ = from ? _fbb.CreateString(from) : 0;
  auto to__ = to ? _fbb.CreateString(to) : 0;
  auto collapse_key__ = collapse_key ? _fbb.CreateString(collapse_key) : 0;
  auto data__ = data ? _fbb.CreateVector<::flatbuffers::Offset<com::google::firebase::messaging::cpp::DataPair>>(*data) : 0;
  auto raw_data__ = raw_data ? _fbb.CreateVector<uint8_t>(*raw_data) : 0;
  auto message_id__ = message_id ? _fbb.CreateString(message_id) : 0;
  auto message_type__ = message_type ? _fbb.CreateString(message_type) : 0;
  auto priority__ = priority ? _fbb.CreateString(priority) : 0;
  auto error__ = error ? _fbb.CreateString(error) : 0;
  auto error_description__ = error_description ? _fbb.CreateString(error_description) : 0;
  auto link__ = link ? _fbb.CreateString(link) : 0;
  auto original_priority__ = original_priority ? _fbb.CreateString(original_priority) : 0;
  return com::google::firebase::messaging::cpp::CreateSerializedMessage(
      _fbb,
      from__,
      to__,
      collapse_key__,
      data__,
      raw_data__,
      message_id__,
      message_type__,
      priority__,
      time_to_live,
      error__,
      error_description__,
      notification,
      notification_opened,
      link__,
      sent_time,
      original_priority__);
}

struct SerializedTokenReceived FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SerializedTokenReceivedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOKEN = 4
  };
  const ::flatbuffers::String *token() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TOKEN);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TOKEN) &&
           verifier.VerifyString(token()) &&
           verifier.EndTable();
  }
};

struct SerializedTokenReceivedBuilder {
  typedef SerializedTokenReceived Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_token(::flatbuffers::Offset<::flatbuffers::String> token) {
    fbb_.AddOffset(SerializedTokenReceived::VT_TOKEN, token);
  }
  explicit SerializedTokenReceivedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SerializedTokenReceived> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SerializedTokenReceived>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SerializedTokenReceived> CreateSerializedTokenReceived(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> token = 0) {
  SerializedTokenReceivedBuilder builder_(_fbb);
  builder_.add_token(token);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SerializedTokenReceived> CreateSerializedTokenReceivedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *token = nullptr) {
  auto token__ = token ? _fbb.CreateString(token) : 0;
  return com::google::firebase::messaging::cpp::CreateSerializedTokenReceived(
      _fbb,
      token__);
}

struct SerializedEvent FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SerializedEventBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EVENT_TYPE = 4,
    VT_EVENT = 6
  };
  com::google::firebase::messaging::cpp::SerializedEventUnion event_type() const {
    return static_cast<com::google::firebase::messaging::cpp::SerializedEventUnion>(GetField<uint8_t>(VT_EVENT_TYPE, 0));
  }
  const void *event() const {
    return GetPointer<const void *>(VT_EVENT);
  }
  template<typename T> const T *event_as() const;
  const com::google::firebase::messaging::cpp::SerializedMessage *event_as_SerializedMessage() const {
    return event_type() == com::google::firebase::messaging::cpp::SerializedEventUnion_SerializedMessage ? static_cast<const com::google::firebase::messaging::cpp::SerializedMessage *>(event()) : nullptr;
  }
  const com::google::firebase::messaging::cpp::SerializedTokenReceived *event_as_SerializedTokenReceived() const {
    return event_type() == com::google::firebase::messaging::cpp::SerializedEventUnion_SerializedTokenReceived ? static_cast<const com::google::firebase::messaging::cpp::SerializedTokenReceived *>(event()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_EVENT_TYPE, 1) &&
           VerifyOffset(verifier, VT_EVENT) &&
           VerifySerializedEventUnion(verifier, event(), event_type()) &&
           verifier.EndTable();
  }
};

template<> inline const com::google::firebase::messaging::cpp::SerializedMessage *SerializedEvent::event_as<com::google::firebase::messaging::cpp::SerializedMessage>() const {
  return event_as_SerializedMessage();
}

template<> inline const com::google::firebase::messaging::cpp::SerializedTokenReceived *SerializedEvent::event_as<com::google::firebase::messaging::cpp::SerializedTokenReceived>() const {
  return event_as_SerializedTokenReceived();
}

struct SerializedEventBuilder {
  typedef SerializedEvent Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_event_type(com::google::firebase::messaging::cpp::SerializedEventUnion event_type) {
    fbb_.AddElement<uint8_t>(SerializedEvent::VT_EVENT_TYPE, static_cast<uint8_t>(event_type), 0);
  }
  void add_event(::flatbuffers::Offset<void> event) {
    fbb_.AddOffset(SerializedEvent::VT_EVENT, event);
  }
  explicit SerializedEventBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SerializedEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SerializedEvent>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SerializedEvent> CreateSerializedEvent(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    com::google::firebase::messaging::cpp::SerializedEventUnion event_type = com::google::firebase::messaging::cpp::SerializedEventUnion_NONE,
    ::flatbuffers::Offset<void> event = 0) {
  SerializedEventBuilder builder_(_fbb);
  builder_.add_event(event);
  builder_.add_event_type(event_type);
  return builder_.Finish();
}

inline bool VerifySerializedEventUnion(::flatbuffers::Verifier &verifier, const void *obj, SerializedEventUnion type) {
  switch (type) {
    case SerializedEventUnion_NONE: {
      return true;
    }
    case SerializedEventUnion_SerializedMessage: {
      auto ptr = reinterpret_cast<const com::google::firebase::messaging::cpp::SerializedMessage *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case SerializedEventUnion_SerializedTokenReceived: {
      auto ptr = reinterpret_cast<const com::google::firebase::messaging::cpp::SerializedTokenReceived *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifySerializedEventUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifySerializedEventUnion(
        verifier,  values->Get(i), types->GetEnum<SerializedEventUnion>(i))) {
      return false;
    }
  }
  return true;
}

inline const com::google::firebase::messaging::cpp::SerializedEvent *GetSerializedEvent(const void *buf) {
  return ::flatbuffers::GetRoot<com::google::firebase::messaging::cpp::SerializedEvent>(buf);
}

inline const com::google::firebase::messaging::cpp::SerializedEvent *GetSizePrefixedSerializedEvent(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<com::google::firebase::messaging::cpp::SerializedEvent>(buf);
}

inline bool VerifySerializedEventBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<com::google::firebase::messaging::cpp::SerializedEvent>(nullptr);
}

inline bool VerifySizePrefixedSerializedEventBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<com::google::firebase::messaging::cpp::SerializedEvent>(nullptr);
}

inline void FinishSerializedEventBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<com::google::firebase::messaging::cpp::SerializedEvent> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSerializedEventBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<com::google::firebase::messaging::cpp::SerializedEvent> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace cpp
}  // namespace messaging
}  // namespace firebase
}  // namespace google
}  // namespace com

#endif  // FLATBUFFERS_GENERATED_MESSAGING_COM_GOOGLE_FIREBASE_MESSAGING_CPP_H_
